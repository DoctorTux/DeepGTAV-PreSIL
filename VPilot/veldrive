#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from deepgtav.messages import Start, Stop, Scenario, Dataset, Commands, frame2numpy
from deepgtav.client import Client

import argparse
import time
import cv2


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description=None)
    parser.add_argument('-l', '--host', default='localhost', help='The IP where DeepGTAV is running')
    parser.add_argument('-p', '--port', default=8000, help='The port where DeepGTAV is running')
    default_dataset_path = None#base_folder + 'dataset.pz'
    parser.add_argument('-d', '--dataset_path', default=default_dataset_path, help='Place to store the dataset')
    args = parser.parse_args()

    # Creates a new connection to DeepGTAV using the specified ip and port. 
    # If desired, a dataset path and compression level can be set to store in memory all the data received in a gziped pickle file.
    client = Client(ip=args.host, port=args.port, datasetPath=args.dataset_path, compressionLevel=9)
    
    print("Connecting to client...")
    
    
    #Dataset config values
    width_val = 1920
    height_val = 1080
    #rate_val=0.025
    rate_val=0.2
    collectVehicles_val = True
    collectPeds_val = True
    collectOffscreen_val = False
    tracking_val = False
    vehicles = []
    peds = []
    lidarParam_val = 7
    recordScenario_val = False
    positionScenario_val = False
    location_val=False
    
    #Change to need
    startIndex_val = 0
    
    
    
    dataset = Dataset(rate=rate_val,frame=[width_val,height_val], throttle=True, brake=True, steering=True, vehicles=collectVehicles_val, peds=collectPeds_val,
                        direction=None, speed=True, yawRate=True, location=location_val, time=True, offscreen=collectOffscreen_val,showBoxes=False, pointclouds=True,
                        stationaryScene=False, collectTracking=tracking_val, vehiclesToCreate=vehicles, pedsToCreate=peds, startIndex=startIndex_val, lidarParam=lidarParam_val,
                        recordScenario=recordScenario_val, positionScenario=positionScenario_val)
    

    

    #driveMode = 786603 #Normal?
    #drivingMode=[-1,15.0]
    #driveMode = 447 # Crashed on semaphore
    
    # PREVIOUS RESPAWNS    
    #restartLocation=[-1336.263,-3044.306,13.43] #airport - Good for ground
    #restartLocation=[925.765,-42.561,78.250, 220.0] #near city on parking lot
    #restartLocation=[-850.619,314.459,85.562] #downhill
    #restartLocation=[868.854, -557.53, 57.007] #Good starting place
    #restartLocation=[1033.18, 371.865, 89.736] #Highway
    #restartLocation=[-500.69, 126.351, 63.1683] #near city center, quiet 
    
    # UPDATED RESPAWNS
    #restartLocation=[-1338.340,-3042.984,13.944, 62.611] #airport - Good for ground
    #restartLocation=[904.758, 9.25794, 78.4338, 63.8005] #near city on parking lot
    #restartLocation=[-847.994,306.274,86.102,215.920] #downhill
    #restartLocation=[905.313, -514.918, 57.864, 292.736] #Good starting place
    #restartLocation=[1033.122, 371.777, 90.251, 131.493] #Highway
    #restartLocation=[134.469, 6503.23, 31.1451, 312.05] #Trucks
    #restartLocation=[-902.083, 1707.73, 184.744, 188.869] #Isolated vehicles
    
    
    
    restartLocation=[905.313, -514.918, 57.864, 292.736] #latest location
    #restartLocation=[947.831, 258.369, 80.4863, 147.973] #latest location
    scenario_location=[]
    scenario = Scenario(drivingMode=[-1,0],location=restartLocation)
    
    # Send the Start request to DeepGTAV. Dataset is set as default, we only receive frames at 10Hz (320, 160)
    client.sendMessage(Start(dataset=dataset,scenario=scenario))
    
    print("Message sent to client to begin.")

    # Start listening for messages coming from DeepGTAV. We do it for 80 hours
    stoptime = time.time() + 80*3600
    while time.time() < stoptime:
        try:
            # We receive a message as a Python dictionary
            message = client.recvMessage()  

        except KeyboardInterrupt:
            break
            
    # We tell DeepGTAV to stop
    client.sendMessage(Stop())
    client.close()
